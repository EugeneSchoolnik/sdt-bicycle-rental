// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "login a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.Request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/login.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "register a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/register.Request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/register.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/register.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/register.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/register.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateUser": {
            "type": "object",
            "required": [
                "email",
                "lastname",
                "name",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                },
                "phone": {
                    "type": "string",
                    "maxLength": 64
                }
            }
        },
        "login.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "login.Request": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "login.SuccessResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.Bicycle": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "lastService": {
                    "type": "string"
                },
                "station": {
                    "$ref": "#/definitions/models.Station"
                },
                "stationID": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Booking": {
            "type": "object",
            "properties": {
                "bicycle": {
                    "$ref": "#/definitions/models.Bicycle"
                },
                "bicycleID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "payment": {
                    "$ref": "#/definitions/models.Payment"
                },
                "paymentID": {
                    "type": "integer"
                },
                "station": {
                    "$ref": "#/definitions/models.Station"
                },
                "stationID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Payment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transactionID": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Rental": {
            "type": "object",
            "properties": {
                "bicycle": {
                    "$ref": "#/definitions/models.Bicycle"
                },
                "bicycleID": {
                    "type": "integer"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                },
                "stationEnd": {
                    "$ref": "#/definitions/models.Station"
                },
                "stationEndID": {
                    "type": "integer"
                },
                "stationStart": {
                    "$ref": "#/definitions/models.Station"
                },
                "stationStartID": {
                    "type": "integer"
                },
                "totalCost": {
                    "type": "number"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Station": {
            "type": "object",
            "required": [
                "locationStreet"
            ],
            "properties": {
                "bikesAvailable": {
                    "type": "integer"
                },
                "bikesTotal": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "locationStreet": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "lastname",
                "name",
                "password",
                "phone"
            ],
            "properties": {
                "bookings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Booking"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastname": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                },
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Payment"
                    }
                },
                "phone": {
                    "type": "string",
                    "maxLength": 64
                },
                "rentals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Rental"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "register.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "register.Request": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/dto.CreateUser"
                }
            }
        },
        "register.SuccessResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger BicycleRental API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
