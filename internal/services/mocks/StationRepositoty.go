// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "sdt-bicycle-rental/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// StationRepositoty is an autogenerated mock type for the StationRepositoty type
type StationRepositoty struct {
	mock.Mock
}

// Create provides a mock function with given fields: station
func (_m *StationRepositoty) Create(station *models.Station) error {
	ret := _m.Called(station)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Station) error); ok {
		r0 = rf(station)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *StationRepositoty) Delete(id uint64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *StationRepositoty) GetByID(id uint64) (*models.Station, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Station
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*models.Station, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *models.Station); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Station)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *StationRepositoty) Update(user *models.Station) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Station) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBikesAvailable provides a mock function with given fields: id, delta
func (_m *StationRepositoty) UpdateBikesAvailable(id uint64, delta int) error {
	ret := _m.Called(id, delta)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBikesAvailable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int) error); ok {
		r0 = rf(id, delta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBikesTotal provides a mock function with given fields: id, delta
func (_m *StationRepositoty) UpdateBikesTotal(id uint64, delta int) error {
	ret := _m.Called(id, delta)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBikesTotal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int) error); ok {
		r0 = rf(id, delta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStationRepositoty creates a new instance of StationRepositoty. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStationRepositoty(t interface {
	mock.TestingT
	Cleanup(func())
}) *StationRepositoty {
	mock := &StationRepositoty{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
